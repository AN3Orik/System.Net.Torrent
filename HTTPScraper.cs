using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Torrent.bencode;
using System.Text;
using System.Text.RegularExpressions;

namespace System.Net.Torrent
{
    public class HTTPScraper : BaseScraper, IScraper
    {
        public HTTPScraper(int timeout) 
            : base(timeout)
        {

        }

        public IEnumerable<IPEndPoint> Announce(string url, string hash)
        {
            throw new NotImplementedException();
        }

        public Dictionary<string, IEnumerable<IPEndPoint>> Announce(string url, string[] hashes)
        {
            byte[] hashBytes = Pack.Hex(hashes[0]);

            String realUrl = url;
            String hashEncoded = "";
            foreach (byte b in hashBytes)
            {
                hashEncoded += String.Format("%{0:X2}", b);
            }
            realUrl += "?info_hash=" + hashEncoded;
            realUrl += "&peer_id=" + hashEncoded;
            realUrl += "&port=12345";
            realUrl += "&uploaded=0";
            realUrl += "&downloaded=0";
            realUrl += "&left=0";
            realUrl += "&event=started";
            realUrl += "&compact=1";

            HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(realUrl);
            webRequest.Accept = "*/*";
            webRequest.UserAgent = "System.Net.Torrent";
            HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse();

            Stream stream = webResponse.GetResponseStream();
            StreamReader reader = new StreamReader(stream);

            String response = reader.ReadToEnd();

            IBencodingType decoded = BencodingUtils.Decode(response);

            return null;
        }

        public Dictionary<string, Tuple<uint, uint, uint>> Scrape(string url, string[] hashes)
        {
            String realUrl = url.Replace("announce", "scrape") + "?";

            String hashEncoded = "";
            foreach (String hash in hashes)
            {
                byte[] hashBytes = Pack.Hex(hash);

                foreach (byte b in hashBytes)
                {
                    hashEncoded += String.Format("%{0:X2}", b);
                }

                realUrl += "info_hash=" + hashEncoded + "&";
            }

            HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(realUrl);
            webRequest.Accept = "*/*";
            webRequest.UserAgent = "System.Net.Torrent";
            HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse();

            Stream stream = webResponse.GetResponseStream();
            //StreamReader reader = new StreamReader(stream);
            BinaryReader binaryReader = new BinaryReader(stream);

            byte[] bytes = new byte[0];
            
            while (true)
            {
                try
                {
                    byte[] b = new byte[1];
                    b[0] = (byte)binaryReader.ReadByte();
                    bytes = bytes.Concat(b).ToArray();
                }
                catch (Exception)
                {
                    break;
                }
            }

            IBencodingType decoded = BencodingUtils.Decode(bytes);

            return null;
        }

        /*info_hash: urlencoded 20-byte SHA1 hash of the value of the info key from the Metainfo file. Note that the value will be a bencoded dictionary, given the definition of the info key above.
peer_id: urlencoded 20-byte string used as a unique ID for the client, generated by the client at startup. This is allowed to be any value, and may be binary data. There are currently no guidelines for generating this peer ID. However, one may rightly presume that it must at least be unique for your local machine, thus should probably incorporate things like process ID and perhaps a timestamp recorded at startup. See peer_id below for common client encodings of this field.
*/
    }
}
